<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ahuan&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-22T10:40:05.334Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>A huan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax笔记</title>
    <link href="http://example.com/2021/05/22/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/05/22/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-22T10:23:51.000Z</published>
    <updated>2021-05-22T10:40:05.334Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="第一章-Ajax-前端技术">          <a href="#第一章-Ajax-前端技术" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一章-Ajax-前端技术" class="headerlink" title="第一章 Ajax 前端技术"></a>第一章 Ajax 前端技术</h1>      <p>前端技术： 在浏览器中执行的程序都是前端， html ， css，js等等</p><p>后端技术：在服务器中执行的程序， 使用java语言开发的后端程序。 servlet,jsp, jdbc,mysql,tomcat等等</p>        <h1 id="1-全局刷新和局部刷新">          <a href="#1-全局刷新和局部刷新" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-全局刷新和局部刷新" class="headerlink" title="1 全局刷新和局部刷新"></a>1 全局刷新和局部刷新</h1>      <p>1）全局刷新： 使用form， href等发起的请求是全局刷新。</p><p> 用户发起请求， 视图改变了， 跳转视图，使用新的数据添加到页面。</p><p>缺点：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 传递数据量比较大。 占用网络的带宽</span><br><span class="line">   2. 浏览器需要重新的渲染整个页面。 </span><br><span class="line">   3. 用户的体验不是那么好</span><br></pre></td></tr></table></div></figure><p>2）局部刷新： 在当前页面中，发起请求，获取数据，更新当前页面的dom对象。 对视图部分刷新。</p><p> 特点：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 数量比较小， 在网络中传输速度快。</span><br><span class="line">   2. 更新页面内容， 是部分更新页面， 浏览器不用全部渲染视图。</span><br><span class="line">   3. 在一个页面中，可以做多个 局部刷新</span><br><span class="line">   4. 从服务器获取的是数据， 拿到更新视图</span><br></pre></td></tr></table></div></figure>        <h1 id="2-异步请求对象">          <a href="#2-异步请求对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-异步请求对象" class="headerlink" title="2 异步请求对象"></a>2 异步请求对象</h1>      <p>在局部刷新中，使用异步请求对象，在浏览器内部发起请求，获取数据。</p><p><a href="https://imgtu.com/i/gLGtUK"><img src="https://z3.ax1x.com/2021/05/22/gLGtUK.jpg" alt="gLGtUK.jpg"></a></p><p>异步对象是在浏览器内部的一种 javascript对象。 各大浏览器都能支持异步对象的使用。chrome ,firework, ie, opper ,</p><p>异步对象 XMLHttpRequest</p>        <h1 id="3-异步对象XMLHttpRequest介绍">          <a href="#3-异步对象XMLHttpRequest介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-异步对象XMLHttpRequest介绍" class="headerlink" title="3. 异步对象XMLHttpRequest介绍"></a>3. 异步对象XMLHttpRequest介绍</h1>      <p>js中的一种对象， 使用js语法创建和使用这个对象。</p><p>var xhr = new XMLHttpRequest();</p><p>之后就可以 使用xhr对象的属性或者函数，进行异步对象的操作。</p><p>使用异步对象实现局部刷新， 异步对象主要负责发起请求，传递请求的参数，并从服务器接收数据。</p><p>局部刷新需要使用那些技术：</p><p>1）javascript ： 创建XMLHttpRequest对象， 调用它的属性或者方法</p><p>2）dom：处理dom，更新select的数据</p><p>3）css: 处理视图， 更新，美化。</p><p>4）servlet：服务器端技术</p><p>5）数据格式：json。 它之前是xml</p><p>把上面这些技术的综合使用叫做ajax（阿贾克斯）。</p>        <h1 id="4-Ajax">          <a href="#4-Ajax" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-Ajax" class="headerlink" title="4 Ajax"></a>4 Ajax</h1>      <p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和XML）。 AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法</p><p>AJAX不是新的编程语言，它是多种技术的综合使用。 包含了javascript, dom</p><p>,css, 服务器端技术， servlet ，jsp ，jdbc等等， 还有 json数据格式。</p><p>使用AJAX实现局部刷新。</p><p>Ajax核心是 javascript 和 xml （json）：使用javascript操作异步对象XMLHttpRequest. 和服务器交换使用json数据格式。</p>        <h1 id="5-异步对象XMLHttpRequest属性和方法">          <a href="#5-异步对象XMLHttpRequest属性和方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-异步对象XMLHttpRequest属性和方法" class="headerlink" title="5. 异步对象XMLHttpRequest属性和方法"></a>5. 异步对象XMLHttpRequest属性和方法</h1>      <ol><li><p>创建异步对象，使用js的语法</p><p>var xhr = new XMLHttpRequest();</p></li><li><p>XMLHttpRequest方法</p><p>①）open(请求方式, 服务器端的访问地址，异步还是同步)</p><p>例如：xhr.open(“get”,”loginServlet”,true);</p><p>②）send(): 使用异步对象发送请求</p></li><li><p>XMLHttpRequest属性</p><p>readyState属性：请求的状态</p><p> 0：表示创建异步对象时，new XMLHttpRequest();</p><p> 1：表示初始异步对象的请求参数。 执行open()方法</p><p> 2：使用send()方法发送请求。</p><p> 3：使用异步对象从服务器接收了数据</p><p> 4：异步对象接收了数据，并在异步对象内部处理完成后。</p><p>status属性：网络的状态，和Http的状态码对应</p><p> 200：请求成功</p><p> 404： 服务器资源没有找到</p><p> 500： 服务器内部代码有错误</p><p>responseText属性：表示服务器端返回的数据</p><p> 例如： var data = xhr.responseText;</p></li></ol>        <h1 id="6-异步对象XMLHttpRequest使用步骤">          <a href="#6-异步对象XMLHttpRequest使用步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-异步对象XMLHttpRequest使用步骤" class="headerlink" title="6. 异步对象XMLHttpRequest使用步骤"></a>6. 异步对象XMLHttpRequest使用步骤</h1>      <p>1）使用js创建异步对象</p><p> var xhr = new XMLHttpRequest();</p><p>2)给异步对象绑定事件。事件名称 onreadystatechange</p><p>例如button增加单击事件 onclick</p><p>xhr绑定事件</p><p>xhr.onreadysatechange=function() { 当事件发生时执行的代码 }</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btnClick()&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">       按钮单击的处理代码</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在绑定事件中做什么，根据readyState值做请求的处理</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xhr.readystatechagne=function()&#123;</span><br><span class="line">   if( xhr.readyState==4 &amp;&amp; xhr.status==200 )&#123;</span><br><span class="line">        从服务器获取了数据， 更新当前页面的dom对象，完成请求的处理</span><br><span class="line">        var data = xhr.responseText;</span><br><span class="line">        更新dom对象</span><br><span class="line">        document.getElementById(&quot;#mydiv&quot;).innertHTML = data;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol><li><p>初始请求的参数，执行open()函数</p><p>xhr.open(“get”,”loginServlet”,true)</p></li></ol><p>4)发送请求，执行send()</p><p>xhr.send()</p>        <h1 id="7-第一个例子">          <a href="#7-第一个例子" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-第一个例子" class="headerlink" title="7. 第一个例子"></a>7. 第一个例子</h1>      <p>使用全局刷新， 实现计算bmi</p><p>可以使用jsp显示request作用域中的数据，使用el表达式</p><p>也可以使用HttpServletResponse对象输出数据， 数据给了浏览器。 浏览器可以接收HttpServletResponse对象print的数据</p>        <h1 id="8-同步请求和异步请求">          <a href="#8-同步请求和异步请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-同步请求和异步请求" class="headerlink" title="8 同步请求和异步请求"></a>8 同步请求和异步请求</h1>      <p>看open(请求方式， 访问uri地址，boolean是不是异步的)</p><p>true：异步请求</p><p>false：同步请求</p>        <h1 id="第二章-jQuery">          <a href="#第二章-jQuery" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二章-jQuery" class="headerlink" title="第二章 jQuery"></a>第二章 jQuery</h1>      <ol><li><p>jquery的介绍</p><p>jquery就是js函数库， 里面有大量的js函数， 使用这些函数操作dom对象， 做事件，动画， ajax处理</p><p>地址： <span class="exturl"><a class="exturl__link" href="https://jquery.com/">https://jquery.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p>下载</p><p>下载地址：<span class="exturl"><a class="exturl__link" href="https://jquery.com/download/">https://jquery.com/download/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>压缩版本： 文件体积比较小，适合项目上线后使用。 jquery-3.4.1.min.js</p><p>未压缩：体积比较大，可读性比较好，适合开发阶段使用 jquery-3.4.1.js</p></li></ol>        <h2 id="2-1-使用jquery">          <a href="#2-1-使用jquery" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-使用jquery" class="headerlink" title="2.1 使用jquery"></a>2.1 使用jquery</h2>      <p>步骤：</p><ol><li><p>需要在你的项目中加入jquery的文件， idea中是把jquery放在webapp目录。一般是创建一个js目录。存放js文件的。 对于hbuilder工具， 放在项目的js目录中就可以了</p></li><li><p>创建一个html文件或者jsp都可以， 在文件中使用</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery的文件的相对路径&quot;</span> /&gt;</span> 这样是不行的</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery的文件的相对路径&quot;</span> /&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>这样是可以的</span><br></pre></td></tr></table></div></figure></li><li><p>在js代码中，调用jquery中函数</p></li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;第一个jquery例子&lt;/title&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  $:jquery中的函数名</span></span><br><span class="line"><span class="comment">  document:是参数</span></span><br><span class="line"><span class="comment">  $(document): 把js中的document对象变成jquery可以使用的对象。</span></span><br><span class="line"><span class="comment">               然后调用ready()的函数。 这个ready()是jquery中的函数</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   ready()的执行时间在页面dom对象加载后执行的。相当于js中onload事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ready(函数):表示在页面对象加载后执行 这个函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* $(document).ready(function()&#123;</span></span><br><span class="line"><span class="comment">alert(&quot;使用jquery了&quot;)</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* $(document).ready( myinit() )</span></span><br><span class="line"><span class="comment">function myinit()&#123;</span></span><br><span class="line"><span class="comment">alert(&quot;====相当于onload==&quot;)</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery提供了简单方式,使用ready()</span></span><br><span class="line"><span class="comment">//$(  参数是一个函数 )</span></span><br><span class="line">$( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;简单的方式使用ready&quot;</span>)</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="2-2-对象的分类">          <a href="#2-2-对象的分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-对象的分类" class="headerlink" title="2.2 对象的分类"></a>2.2 对象的分类</h2>      <p>dom对象和jquery对象。 在一个文件中同时存在两种对象</p><p>dom对象： 使用js的代码获取，创建的对象。 html中的对象都是dom对象。</p><p>jquery对象： 使用jquery获取获取的对象。</p><p>为什么要使用dom对象，还有jquery对象？</p><p>目的是要dom对象的函数或者属性， 以及使用使用jquery中提供的函数或者属性。</p><p>要 dom中的内容就需要使用dom对象， 要使用jquery函数库中的函数需要使用jquery对象。</p><p>dom对象和jquery对象可以相互转换的</p>        <h3 id="2-2-1-dom对象转为jquery对象。">          <a href="#2-2-1-dom对象转为jquery对象。" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-1-dom对象转为jquery对象。" class="headerlink" title="2.2.1. dom对象转为jquery对象。"></a>2.2.1. dom对象转为jquery对象。</h3>      <p>语法： $( dom对象 ) 得到的是一个jquery对象， 可以调用jquery中提供的函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;t1&quot;</span> /&gt;</span><br><span class="line"><span class="comment">//通过js的函数，获取dom对象</span></span><br><span class="line"><span class="keyword">var</span> dom= <span class="built_in">document</span>.getElementById(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"><span class="comment">//把dom转为jquery</span></span><br><span class="line"><span class="keyword">var</span> jqueryObj = $(dom);</span><br><span class="line"><span class="comment">//调用jquery中的函数</span></span><br><span class="line">jqueryObject.val();<span class="comment">//获取dom对象的value属性的值</span></span><br><span class="line"></span><br><span class="line">提示：为了区分dom对象和jquery对象，可以在jquery对象变量名上，加一个$ , 例如 $obj </span><br></pre></td></tr></table></div></figure>        <h3 id="2-2-2-jquery对象转为dom对象。">          <a href="#2-2-2-jquery对象转为dom对象。" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-2-jquery对象转为dom对象。" class="headerlink" title="2.2.2 jquery对象转为dom对象。"></a>2.2.2 jquery对象转为dom对象。</h3>      <p>语法： jquery对象是一个数组， 数组成员是dom对象。 使用 [下标] 或 get(下标)</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txt1&quot;</span>/&gt;</span><br><span class="line">使用jquery的方式表示这个dom对象</span><br><span class="line">$(<span class="string">&quot;#txt1&quot;</span>):获取id是txt1的dom对象。 </span><br><span class="line"><span class="keyword">var</span>  obj = $(<span class="string">&quot;#txt1&quot;</span>); <span class="comment">//obj是一个jquery对象，是一个包含了一个成员的dom数组。  obj[0]就是dom对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dom = obj[<span class="number">0</span>]; 或者 obj.get(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用dom对象的函数或者属性</span></span><br><span class="line">alert(dom.value)</span><br></pre></td></tr></table></div></figure>        <h2 id="2-3-选择器">          <a href="#2-3-选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-选择器" class="headerlink" title="2.3 选择器"></a>2.3 选择器</h2>      <p>什么是选择器： 选择器就是一个字符串， 是一个定位dom对象的字符串。 使用这个字符串作为条件定位dom对象。 可以使用 id ，class样式名称， 标签名称等作为选择器使用，定位dom对象</p>        <h3 id="2-3-1-基本选择器">          <a href="#2-3-1-基本选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-1-基本选择器" class="headerlink" title="2.3.1 基本选择器"></a>2.3.1 基本选择器</h3>      <p>使用dom对象的id， class名称， 标签名称等作为条件定位dom对象。</p><ol><li><p>使用dom对象的id作为条件</p><p>语法： $(“#id”) document.getElementById(“id”)</p></li><li><p>class选择器，使用对象的class名称定位dom对象</p><p>语法：$(“.class名称”) document.getElementsByClassName()</p></li><li><p>标签选择器，使用标签名称作为条件定位dom对象</p><p>语法：$(“标签名称”) document.getElementsByTagName()</p></li><li><p>所有选择器</p><p>语法： $(“*”)</p></li><li><p>组合选择器</p><p>语法：$(“#id,.class,标签名称”)</p><p>组合选择器使用 id 或者class名称或者标签名称定位dom对象， id，class，标签名称可以任意组合。</p></li></ol>        <h3 id="2-3-2-表单选择器">          <a href="#2-3-2-表单选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-2-表单选择器" class="headerlink" title="2.3.2 表单选择器"></a>2.3.2 表单选择器</h3>      <p>表单选择器使用 dom对象的type属性值定位dom对象的， 和form标签无关。</p><p>语法： $(“:type属性值”)</p><p>例如：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line">使用表单选择器： $(<span class="string">&quot;:text&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="2-4-过滤器">          <a href="#2-4-过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-过滤器" class="headerlink" title="2.4 过滤器"></a>2.4 过滤器</h2>      <p>过滤器是一个字符串，用了筛选dom对象的， 过滤器是和选择器一起使用的。 在选择了dom对象后，在进行过滤筛选。</p>        <h3 id="2-4-1-基本过滤器">          <a href="#2-4-1-基本过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-1-基本过滤器" class="headerlink" title="2.4.1 基本过滤器"></a>2.4.1 基本过滤器</h3>      <p>使用dom对象在数组中的位置，作为过滤条件的。</p><p>1）选择数组中第一个dom成员</p><p>语法：$(“选择器:first”)</p><ol><li>选择数组中最后一个成员</li></ol><p>语法：$(“选择器:last”)</p><ol><li>选择等于指定下标的dom成员</li></ol><p>语法：$(“选择器:eq(下标)”)</p><p>4）选择大于某个下标的所有成员</p><p>语法：$(“选择器:gt(下标)”)</p><p>5）选择小于某个下标的所有成员</p><p>语法：$(“选择器:lt(下标)”)</p>        <h3 id="2-4-2-表单过滤器">          <a href="#2-4-2-表单过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-2-表单过滤器" class="headerlink" title="2.4.2 表单过滤器"></a>2.4.2 表单过滤器</h3>      <p>根据对象的状态作为条件，筛选dom对象</p><p>1）获取可用的文本框</p><p>语法：$(“:text:enabled”)</p><ol><li>获取不可用的文本框</li></ol><p>语法： $(“:text:disabled”)</p><p>3）获取选中的复选框</p><p>语法：$(“:checkbox:checked”)</p><ol><li>获取选中下拉列表框</li></ol><p>语法： $(“选择器 &gt; option:selected”)</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;lang&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sql&quot;</span>&gt;</span>sql<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="2-5-函数">          <a href="#2-5-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-函数" class="headerlink" title="2.5 函数"></a>2.5 函数</h2>              <h3 id="2-5-1-第一组函数">          <a href="#2-5-1-第一组函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-1-第一组函数" class="headerlink" title="2.5.1 第一组函数"></a>2.5.1 第一组函数</h3>      <p>1）val()：操作dom对象的value值</p><p>val(): 没有参数， 获取dom数组中第一个dom对象的value值</p><p>val(参数)： 有参数， 给dom数组中所有dom对象的value属性赋值</p><p>2）text() : 操作标签的文本内容，标签开始和结束之间的内容</p><p>text(): 没有参数， 把dom数组中所有dom对象的文本内容链接起来，形成一个字符串，并返回这个这个字符串。</p><p>text(参数)：给dom数组中的所有成员统一赋予新的文本</p><p>3）attr(): 操作value ，文本以外的属性时。</p><p>attr(“属性名”)：获取dom数组中第一个dom成员的此属性值</p><p>attr(“属性名”,”属性值”)：给dom数组中所有dom成员此属性赋值</p>        <h3 id="2-5-2-第二组函数">          <a href="#2-5-2-第二组函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-2-第二组函数" class="headerlink" title="2.5.2 第二组函数"></a>2.5.2 第二组函数</h3>      <p>1） remove()</p><p>删除选择的dom对象和他的子对象</p><p>语法： $(”选择器“).remove()</p><p>2） empty()</p><p>删除dom对象的子对象</p><p>语法： $(“选择器”).empty()</p><ol><li>append()</li></ol><p>给dom对象在他的后面增加新的dom对象</p><p>语法： $(“选择器”).append( 子dom 对象 )</p><ol><li>html()</li></ol><p>html(): 获取dom数组中第一个dom对象的文本值（ html()返回结果相当于innertHTML ）</p><p>html(参数)：给dom数组中所有成员设置新的文本内容。 （html()返回结果相当于innertHTML ）</p><p>5)each()</p><p>each是循环函数， 可以循环数组， json ， dom对象数组</p><p>① $.each( 要循环的内容， function(index,element ){ 处理函数} )</p><p>要循环的内容: 可以是数组， json对象， dom对象数组。</p><p>function： 循环的处理函数， 每个成员都会执行函数一次。</p><p> index：是循环变量的值， 名称自定义</p><p> element： 和index对应的成员， element名称是自定义的</p><p>例如</p><p>doArrayContent： function(index,element ){ 处理函数} )</p><p>② $(“选择器”).each(function(index,element){ 处理函数} )</p><p>可以对jquery对象进行循环处理。 jquery对象就是dom数组</p>        <h2 id="2-6-事件">          <a href="#2-6-事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-事件" class="headerlink" title="2.6 事件"></a>2.6 事件</h2>      <p>jquery可以给dom对象绑定事件，在程序执行期间动态的处理事件</p>        <h3 id="2-6-1-第一种事件绑定语法">          <a href="#2-6-1-第一种事件绑定语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-1-第一种事件绑定语法" class="headerlink" title="2.6.1 第一种事件绑定语法"></a>2.6.1 第一种事件绑定语法</h3>      <p>语法： $(“选择器”).事件名称(事件的处理函数)</p><p>$(“选择器”)：选择0或多个dom对象。给他们绑定事件</p><p>事件名称： 就是js中的 去掉on的部分。 例如单击事件onclick, 这里的事件名称就是 click</p><p>事件的处理函数: 函数定义， 当事件发生时，执行这个函数。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;绑定事件&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> 绑定事件</span><br><span class="line">$(<span class="string">&quot;#btn&quot;</span>).click( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; 单击的处理代码 &#125; )</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;:button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; 单击处理代码&#125;)</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//页面dom对象加载后执行, 相当于onload事件</span></span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;==button单击了，执行处理函数==&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;绑定事件&quot;</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="2-6-2-第二种事件绑定方式，-on">          <a href="#2-6-2-第二种事件绑定方式，-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-2-第二种事件绑定方式，-on" class="headerlink" title="2.6.2 第二种事件绑定方式， on"></a>2.6.2 第二种事件绑定方式， on</h3>      <p>语法： $(“选择器”).on( 事件名称, function(){事件处理函数})</p><p>事件： 就是js中去掉on的部分。</p><p>function： 事件处理函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;绑定事件&quot;</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">&quot;按钮单击了&quot;</span>)&#125;)</span><br><span class="line">&lt;/script&gt;        </span><br></pre></td></tr></table></div></figure>        <h2 id="2-7-Ajax">          <a href="#2-7-Ajax" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-Ajax" class="headerlink" title="2.7 Ajax"></a>2.7 Ajax</h2>      <p>使用jquery提供的函数实现ajax请求的处理。 代替直接使用XMLHttpRequest. 但是jquery实际还是使用的异步对象。</p>        <h3 id="2-7-1-ajax-核心的函数">          <a href="#2-7-1-ajax-核心的函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-1-ajax-核心的函数" class="headerlink" title="2.7.1 $.ajax() 核心的函数"></a>2.7.1 $.ajax() 核心的函数</h3>      <p>语法： $.ajax( { json格式的参数} )</p><p>json格式的参数：key是定义好的， 需要开发人员给key赋值。 这些key是用来表示ajax请求必须的参数</p><p>例如，请求的uri地址， 是不是异步请求， 请求的方式等等。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(</span><br><span class="line">  &#123;</span><br><span class="line">      url:<span class="string">&quot;queryProvinceServlet&quot;</span>,</span><br><span class="line">      type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">      data:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;,</span><br><span class="line">      dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123; 开发人员获取数据，更新dom对象 &#125;,</span><br><span class="line">      error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">&quot;请求错误&quot;</span>)&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></div></figure><p>url：服务器的地址，例如某个servlet的访问地址。 queryProvinceServlet</p><p>type:表示请求的方式，get，post。 默认是get。 这个值不用区分大小写</p><p>data：表示提交的请求参数。 可以是string， 数组， json类型的。 推荐使用json格式。</p><p> 例如： data: {“name”:”李四”,”age”:20}</p><p> jquery在发送请求时，会把json中的key作为请求的参数使用， key对应的值作为参数数据。</p><p> 转为的结果： <span class="exturl"><a class="exturl__link" href="http://localhost:8080/myweb/queryProvinceServlet?name=%E6%9D%8E%E5%9B%9B&amp;age=20">http://localhost:8080/myweb/queryProvinceServlet?name=李四&amp;age=20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>dataType: 数据格式， 可以是 html， text ， xml ，json等等。 表示发起请求后，希望服务器端返回的数据格式。 jquery可以尝试使用对应格式处理返回的数据。 比如你指定了 dataType:json,表示希望服务器返回的是json格式数据。 然后jquery把json数据转为json对象。服务器代码可以获取到 dataType的内容。</p><p> 例如： 请求中 dataType:”json”, jquery发起请求后，</p><p> 在请求头中 Accept: application/json, text/javascript, <em>/</em>; q=0.01</p><p> 如果dataType:”text”, 请求中</p><p> Accept: text/plain, <em>/</em>; q=0.01</p><p>success: 函数function。 当服务器端返回了数据，jquery处理完数据后，执行这个函数。 等同于异步对象的 readyState==4 $$ status=200的情况</p><p> 例如： success:function( data){ 开发人员处理服务器返回的数据 }</p><p> data是自定义形参， 相当于 data= xhr.responseText</p><p>error:function(), 当请求错误时，执行这个函数。</p><p>contentType:表示请求的参数数据格式。例如 application/json , 这个内容可以不写。</p><p>async: 是一个boolean表示请求是同步的还是异步的。 true是异步的，默认是true； false同步的.</p>        <h3 id="2-7-2-get">          <a href="#2-7-2-get" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-2-get" class="headerlink" title="2.7.2 $.get()"></a>2.7.2 $.get()</h3>      <p>$.get()这个函数就是执行get请求方式的ajax</p><p>语法： $.get(url, 请求参数， success函数， dataType)</p><p>例如：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;queryName&quot;</span>,&#123;<span class="string">&quot;proid&quot;</span>:<span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123; 获取省份名称 &#125;, <span class="string">&quot;text&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="2-7-3-post">          <a href="#2-7-3-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-3-post" class="headerlink" title="2.7.3 $.post()"></a>2.7.3 $.post()</h3>      <p>$.post() 执行post请求的ajax。</p><p>语法： $.post(url, 请求参数， success函数， dataType)</p><p>例如：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">&quot;queryName&quot;</span>,&#123;<span class="string">&quot;proid&quot;</span>:<span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123; 获取省份名称 &#125;, <span class="string">&quot;text&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="2-8-级联查询">          <a href="#2-8-级联查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8-级联查询" class="headerlink" title="2.8 级联查询"></a>2.8 级联查询</h2>      <p>思路：有两个数据库的查询 1： 查询所有的省份名称和id ； 2 根据提交的省份id ，查询city表，得到城市列表</p><p> 有两个servlet接收请求， 一个查询所有的省份 ；一个是接收省份id的参数，查询省份对应的城市列表。</p><p> 数据格式使用 json</p><p> 发起请求使用 $.ajax, $.get, $.post</p><p> 事件： onChange()</p><p>实现步骤：</p><p>1.数据表province( 获取全部的id和name列的值)，</p><p>city表根据provinceid的值，得到id，name列</p><p>2.创建web应用。 加入mysql驱动的jar 和jackson的jar</p><p>3.创建实体类， Province , City</p><p>4.创建Dao类， QueryDao类，有两个方法</p><p>5.创建Servlet， 两个servlet ，一个是查询所有的省份名称， 一个是查询城市列表</p><p>6.创建jsp， 发起两个ajax请求。</p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;第一章-Ajax-前端技术&quot;&gt;
          &lt;a href=&quot;#第一章-Ajax-前端技术&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#第一章-Ajax-前</summary>
      
    
    
    
    <category term="Ajax" scheme="http://example.com/categories/Ajax/"/>
    
    
    <category term="Ajax个人笔记" scheme="http://example.com/tags/Ajax%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GitHub搭建个人博客具体步骤</title>
    <link href="http://example.com/2021/04/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/04/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2021-04-13T04:29:12.000Z</published>
    <updated>2021-04-17T08:27:11.109Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="搭建步骤：">          <a href="#搭建步骤：" class="heading-link"><i class="fas fa-link"></i></a><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2>      <p><a href="https://imgtu.com/i/c4d4GF"><img src="https://z3.ax1x.com/2021/04/17/c4d4GF.png" alt="c4d4GF.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;搭建步骤：&quot;&gt;
          &lt;a href=&quot;#搭建步骤：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#搭建步骤：&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="关于博客" scheme="http://example.com/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="用hexo搭建博客" scheme="http://example.com/tags/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/13/hello-world/"/>
    <id>http://example.com/2021/04/13/hello-world/</id>
    <published>2021-04-13T03:54:11.339Z</published>
    <updated>2021-04-13T03:54:11.340Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link" href="https://hexo.io/">Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/">documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link" href="https://github.com/hexojs/hexo/issues">GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="Quick-Start">          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post">          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/writing.html">Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server">          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/server.html">Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files">          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/generating.html">Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites">          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-exter</summary>
      
    
    
    
    
  </entry>
  
</feed>
