<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ahuan&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-19T13:08:23.662Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>A huan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>题2：两数相加</title>
    <link href="http://example.com/2021/09/19/%E7%AE%97%E6%B3%95/%E9%A2%982%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://example.com/2021/09/19/%E7%AE%97%E6%B3%95/%E9%A2%982%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-09-19T13:06:33.000Z</published>
    <updated>2021-09-19T13:08:23.662Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="题2：两数相加">          <a href="#题2：两数相加" class="heading-link"><i class="fas fa-link"></i></a><a href="#题2：两数相加" class="headerlink" title="题2：两数相加"></a>题2：两数相加</h4>      <p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 &#x3D; 807.</span><br></pre></td></tr></table></div></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [0], l2 &#x3D; [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></div></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></div></figure><p><strong>提示：</strong></p><p>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;= Node.val &lt;= 9<br>题目数据保证列表表示的数字不含前导零</p><p><strong>题目分析：</strong>关键点在于处理好进位</p><ul><li>可能出现的情况：</li></ul><ol><li>l1.val+l2.val&lt;0，sum直接加入节点</li><li>l1.val+l2.val&gt;0，sum取模后加入节点，将sum/10当做进位，与下一节点相加</li><li>l1.length &gt; l2.length,l1多出来节点中的元素添加进下一节点即可</li><li>最后两个节点中的数相加后，需要检查一次进位。</li></ol><p><strong>解题思路：</strong></p><ul><li>创建一个dummy用来占位，curr用来遍历</li><li>用carry表示进位</li><li>判断两个链表是否为空，不为空，进行相加</li><li>检查carry是否为0，为0则直接存，不为0则加上carry的值</li><li>sum+=carry，用来计算进位后相加的和，用sum%10,来计算下一节点存放的数</li><li>carry的取值用Math.floor(sum/10)来计算。</li><li>最后在检查一次carry，为1则在下一节点添加，不为0则最直接返回。</li></ul><p><strong>图解：</strong></p><p><img src="/2021/09/19/%E7%AE%97%E6%B3%95/%E9%A2%982%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/Users\ZhangHuan\Desktop\图片\Snipaste_2021-07-14_11-33-15.jpg"></p><p><strong>代码：</strong></p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">      <span class="keyword">let</span> curr = dummy;</span><br><span class="line">      <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">          sum += l1.val;</span><br><span class="line">          l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">          sum += l2.val;</span><br><span class="line">          l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += carry;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        carry = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></div></figure><p><strong>补充知识点：</strong>dummy节点</p><ul><li>作为链表的头节点</li><li>解决链表头部的极端情况</li><li>在单向链表中返会dummy.next,对链表不产生影响</li></ul>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h4 id=&quot;题2：两数相加&quot;&gt;
          &lt;a href=&quot;#题2：两数相加&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#题2：两数相加&quot; class=&quot;header</summary>
      
    
    
    
    <category term="LeetCode算法题" scheme="http://example.com/categories/LeetCode%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>题1：两数相加</title>
    <link href="http://example.com/2021/09/17/%E7%AE%97%E6%B3%95/%E9%A2%981%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://example.com/2021/09/17/%E7%AE%97%E6%B3%95/%E9%A2%981%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-09-17T13:45:07.000Z</published>
    <updated>2021-09-19T09:57:13.379Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="题一：两数之和">          <a href="#题一：两数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#题一：两数之和" class="headerlink" title="题一：两数之和"></a>题一：两数之和</h4>      <p><strong>示例1：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></div></figure><p><strong>示例2：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></div></figure><p><strong>解题思路：</strong></p><ul><li><p>创建一个map</p></li><li><p>for循环遍历nums数组</p></li><li><p>用target减nums[i]（用来计算那个数字能跟减去的数字相加得到target）</p></li><li><p>检查map里有没有这个数，如果有则返回结果，如果没有则把num[i]当作key，i当作value放入map中。</p><p><strong>这样放的好处：</strong>map.has()检查的key,把数字当key,也就是实际的value。</p></li></ul><p><strong>图解：</strong><img src="/2021/09/17/%E7%AE%97%E6%B3%95/%E9%A2%981%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/Users\ZhangHuan\Desktop\图片\Snipaste_2021-07-12_14-32-15.jpg"></p><p><strong>具体代码：</strong></p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">       <span class="keyword">const</span> complement = target - nums[i]</span><br><span class="line">       <span class="keyword">if</span> (map.has(complement)) &#123;</span><br><span class="line">         <span class="keyword">return</span> (map.get(complement), i)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         map.set(nums[i], i)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> []</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></div></figure><p><strong>补充知识点：</strong></p><p>1、map():</p><ul><li>Map是JavaScript中的数据结构，它允许存储[键，值]对，其中任何值都可以用作键或值。</li><li>Map集合中的键和值可以是任何类型，并且如果使用集合中已存在的键将值添加到Map集合中，则新值将替换旧值。</li><li>映射对象中元素的迭代按插入顺序完成，并且“for…”循环为每次迭代返回所有[键，值]对的数组。</li></ul><p>2、map.has():用于检查Map中是否存在具有指定键的元素。 </p><p>3、map.get():获取指定key对应的value</p><p>4、map.set():</p><ul><li><p><strong>set()方法</strong>为 <code>Map</code> 对象添加或更新一个指定了键（<code>key</code>）和值（<code>value</code>）的（新）键值对。</p></li><li><p><strong>语法：</strong>myMap.set(key, value);</p></li><li><p><strong>参数:</strong></p><p>key</p><p>  要添加至相应 <code>Map</code> 对象的元素的键。</p><p>value</p><p>要添加至相应 <code>Map</code> 对象的元素的值。</p></li><li><p>示例：</p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个新元素添加到 Map 对象</span></span><br><span class="line">myMap.set(<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">myMap.set(<span class="number">1</span>, <span class="string">&quot;foobar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Map对象中更新某个元素的值</span></span><br><span class="line">myMap.set(<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h4 id=&quot;题一：两数之和&quot;&gt;
          &lt;a href=&quot;#题一：两数之和&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#题一：两数之和&quot; class=&quot;header</summary>
      
    
    
    
    <category term="LeetCode算法题" scheme="http://example.com/categories/LeetCode%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="http://example.com/2021/05/28/JS/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://example.com/2021/05/28/JS/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2021-05-28T11:37:54.000Z</published>
    <updated>2021-05-30T08:38:59.986Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="一、防抖">          <a href="#一、防抖" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、防抖" class="headerlink" title="一、防抖"></a>一、防抖</h2>              <h5 id="1-1-概念">          <a href="#1-1-概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h5>      <p>在进行窗口的resize、scroll，输入框表单校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果。 </p>        <h5 id="1-2-实际应用">          <a href="#1-2-实际应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-实际应用" class="headerlink" title="1.2 实际应用"></a>1.2 实际应用</h5>      <p>举一个例子：滚动监听功能，很多网站会提供一个按钮，用于返回顶部。这个按钮在滚动条滚动一段距离以后才会出现。</p><p>[<img src="https://z3.ax1x.com/2021/05/28/2keYOU.md.jpg" alt="2keYOU.md.jpg" style="zoom: 50%;">]</p><p>现在我们抽象出这个功能需求–<strong>监听浏览器滚动事件，返回当前滚动条与顶部的距离</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">　　<span class="built_in">console</span>.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll  = showTop</span><br></pre></td></tr></table></div></figure>        <h5 id="出现的问题：">          <a href="#出现的问题：" class="heading-link"><i class="fas fa-link"></i></a><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h5>      <p>但是此函数在运行时回存在一个问题：执行频率太高了。 高到什么程度呢？以chrome为例，我们可以点击选中一个页面的滚动条，然后点击一次键盘的【向下方向键】，会发现函数执行了<strong>8-9次</strong>！</p><p>[<img src="https://z3.ax1x.com/2021/05/28/2kmEN9.md.jpg" alt="2kmEN9.md.jpg" style="zoom: 67%;"></p><p>首先我们并不需要如此高频率的反馈，其次由于浏览器的性能是有限的，我们不应该在此浪费，所以我们尝试利用<strong>防抖</strong>来优化这种情况。</p>        <h5 id="解决思路：在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms，然后：">          <a href="#解决思路：在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms，然后：" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决思路：在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms，然后：" class="headerlink" title="解决思路：在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms，然后："></a>解决思路：<strong>在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms</strong>，然后：</h5>      <ul><li>如果在200ms内没有再次触发滚动事件，那么就执行函数</li><li>如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时</li></ul><p><strong>效果</strong>：如果短时间内大量触发同一事件，只会执行一次函数。</p><p><strong>实现</strong>：既然前面都提到了计时，那实现的关键就在于<code>setTimeout</code>这个函数，由于还需要一个变量来保存计时，考虑维护全局纯净，可以借助闭包来实现：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* fn [function] 需要防抖的函数</span></span><br><span class="line"><span class="comment">* delay [number] 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) <span class="comment">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span></span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(fn,delay) </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(fn,delay) <span class="comment">// 进入该分支说明当前并没有在计时，那么就开始一个计时</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>简化写法</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*****************************简化后的分割线 ******************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay) <span class="comment">// 简化写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后是旧代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">　　<span class="built_in">console</span>.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(showTop,<span class="number">1000</span>) <span class="comment">// 为了方便观察效果我们取个大点的间断值，实际使用根据需要来配置</span></span><br></pre></td></tr></table></div></figure><p>此时会发现，必须在停止滚动1秒以后，才会打印出滚动条位置。</p><p>到这里，已经把<strong>防抖</strong>实现了。</p><p><strong>定义：</strong>对于<strong>短时间内连续触发</strong>的事件（上面的滚动事件），<strong>防抖的含义就是让某个时间期限（如上面的1000毫秒）内，事件处理函数只执行一次。</strong></p>        <h5 id="1-3-防抖实际应用场景：">          <a href="#1-3-防抖实际应用场景：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-防抖实际应用场景：" class="headerlink" title="1.3 防抖实际应用场景："></a>1.3 防抖实际应用场景：</h5>      <ol><li>scroll事件滚动触发</li><li>搜索框输入查询</li><li>表单验证</li><li>按钮提交事件</li><li>浏览器窗口缩放， resize事件</li></ol>        <h2 id="二、节流">          <a href="#二、节流" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h2>              <h5 id="2-1-原理：如果你持续触发一件事件。每隔一段时间，只执行一次事件。">          <a href="#2-1-原理：如果你持续触发一件事件。每隔一段时间，只执行一次事件。" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-原理：如果你持续触发一件事件。每隔一段时间，只执行一次事件。" class="headerlink" title="2.1 原理：如果你持续触发一件事件。每隔一段时间，只执行一次事件。"></a>2.1 原理：如果你持续触发一件事件。每隔一段时间，只执行一次事件。</h5>      <p><strong>2.2 实际应用：</strong></p><p>继续思考，使用上面的防抖方案来处理问题的结果是：</p><ul><li>如果在限定时间段内，不断触发滚动事件（比如某个用户闲着无聊，按住滚动不断的拖来拖去），只要不停止触发，理论上就永远不会输出当前距离顶部的距离。</li></ul><p><strong>但是如果产品同学的期望处理方案是：即使用户不断拖动滚动条，也能在某个时间间隔之后给出反馈呢？</strong></p><p><strong>2.3 实现：</strong></p><p>方案一：借助时间戳</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> context, args;</span><br><span class="line">      <span class="keyword">let</span> old = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        context = <span class="built_in">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="comment">//获取当前时间戳</span></span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().valueOf();</span><br><span class="line">        <span class="keyword">if</span> (now - old &gt; wait) &#123;</span><br><span class="line">          <span class="comment">//立即执行</span></span><br><span class="line">          func.apply(context, args);</span><br><span class="line">          old = now;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></div></figure><p>方案二：定时器</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">         <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">       valid = <span class="literal">false</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         fn()</span><br><span class="line">         valid = <span class="literal">true</span>;</span><br><span class="line">       &#125;, delay)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 以下照旧</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;一、防抖&quot;&gt;
          &lt;a href=&quot;#一、防抖&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#一、防抖&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="防抖和节流" scheme="http://example.com/tags/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="http://example.com/2021/05/27/JS/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2021/05/27/JS/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2021-05-27T09:11:20.000Z</published>
    <updated>2021-05-27T09:12:50.352Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="浅拷贝和深拷贝，以及实现的方法">          <a href="#浅拷贝和深拷贝，以及实现的方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#浅拷贝和深拷贝，以及实现的方法" class="headerlink" title="浅拷贝和深拷贝，以及实现的方法"></a>浅拷贝和深拷贝，以及实现的方法</h2>              <h4 id="1、在理解浅拷贝和深拷贝之前首先认识JavaScript的变量类型；">          <a href="#1、在理解浅拷贝和深拷贝之前首先认识JavaScript的变量类型；" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、在理解浅拷贝和深拷贝之前首先认识JavaScript的变量类型；" class="headerlink" title="1、在理解浅拷贝和深拷贝之前首先认识JavaScript的变量类型；"></a>1、在理解浅拷贝和深拷贝之前首先认识JavaScript的变量类型；</h4>      <p>（1）基本类型： 5种基本数据类型Undefined、Null、Boolean、Number 和 String，变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。 </p><p>（2）引用类型： 存放在堆内存中的对象，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</p>        <h4 id="2、深拷贝-浅拷贝">          <a href="#2、深拷贝-浅拷贝" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、深拷贝-浅拷贝" class="headerlink" title="2、深拷贝 浅拷贝"></a>2、深拷贝 浅拷贝</h4>      <p><strong>浅拷贝：</strong>浅拷贝是创建一个新对象，这个对象有着原始属性值的一份精确拷贝，如果属性是基本类型，拷贝的就是基本类型的值，如果是引用类型，拷贝的就是内存地址，如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p>[<img src="https://z3.ax1x.com/2021/05/27/2PWBXq.jpg" alt="2PWBXq.jpg" style="zoom:80%;"></p><p><strong>深拷贝：</strong>深拷贝是将一个对象从内存中完整的拷贝出来，从内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象。</p><p>](<span class="exturl"><a class="exturl__link" href="https://imgtu.com/i/2PWBXq">https://imgtu.com/i/2PWBXq</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)<br><a href="https://imgtu.com/i/2PW0cn"><img src="https://z3.ax1x.com/2021/05/27/2PW0cn.jpg" alt="2PW0cn.jpg" style="zoom: 80%;"></a></p>        <h4 id="3、针对引用类型来说-赋值-深拷贝-浅拷贝的区别">          <a href="#3、针对引用类型来说-赋值-深拷贝-浅拷贝的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、针对引用类型来说-赋值-深拷贝-浅拷贝的区别" class="headerlink" title="3、针对引用类型来说 赋值 深拷贝 浅拷贝的区别"></a>3、针对引用类型来说 赋值 深拷贝 浅拷贝的区别</h4>      <p><strong>浅拷贝  赋值的区别：</strong></p><p>​        当我们把一个对象赋值给一个新的变量时，赋的其实是该对象在栈中的地址，而不是堆中的数据。也就是两个对象指的是同一个存储空间。无论哪个对象发生改变，其实都是改变的存储空间的内容，因此两个对象是联动的。</p><p>​        浅拷贝：重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，但拷贝前后对象的引用数据类型共享一块内存，会互相影响。</p><p>​        深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象的子对象进行递归拷贝，拷贝前后的两个对象互不影响。</p><div class="table-container"><table><thead><tr><th></th><th>和原数据是否指向同一对象</th><th>第一层数据为基本数据类型</th><th>第一层数据为引用数据类型</th></tr></thead><tbody><tr><td>赋值</td><td>是</td><td>改变会使原始数据一同改变</td><td>改变会使原始数据一同改变</td></tr><tr><td>浅拷贝</td><td>否</td><td>改变不会使原始数据一同改变</td><td>改变会使原始数据一同改变</td></tr><tr><td>深拷贝</td><td>否</td><td>改变不会使原始数据一同改变</td><td>改变不会使原始数据一同改变</td></tr></tbody></table></div>        <h4 id="4、什么时候使用深拷贝，以及注意事项">          <a href="#4、什么时候使用深拷贝，以及注意事项" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、什么时候使用深拷贝，以及注意事项" class="headerlink" title="4、什么时候使用深拷贝，以及注意事项"></a>4、什么时候使用深拷贝，以及注意事项</h4>      <p>我们在希望改变新的数组（对象）的时候，不改变原数组（对象）时使用深拷贝。</p><p>如果对象比较大，层级比较多，深拷贝会带来性能上的问题。所以在遇到深拷贝时要考虑有没有其它方案，实际应用中还是以浅拷贝为主。</p>        <h4 id="5、浅拷贝的实现方式">          <a href="#5、浅拷贝的实现方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、浅拷贝的实现方式" class="headerlink" title="5、浅拷贝的实现方式"></a>5、浅拷贝的实现方式</h4>      <p>方式一 自定义函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj);</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(shallowObj.arr[<span class="number">0</span>]) <span class="comment">// 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dst = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class="line">            dst[prop] = src[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>方式二 ES6 Object.assign() // 多层是浅拷贝 一层是深拷贝</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.arr[<span class="number">0</span>]) <span class="comment">// 10</span></span><br></pre></td></tr></table></div></figure><p>方式三 ES6 扩展运算符</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;...obj&#125;;</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.arr[<span class="number">0</span>]); <span class="comment">// 10</span></span><br></pre></td></tr></table></div></figure><p>方式四 jQuery.extend()</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = jQuery.extend(&#123;&#125;, obj);;</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.arr[<span class="number">0</span>]); <span class="comment">// 10</span></span><br></pre></td></tr></table></div></figure><p>方式五 数组方法（只适用于类数组对象） Array.from()</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> array2 = <span class="built_in">Array</span>.from(array1);</span><br><span class="line">array1[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(array2[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//输出结果为： &quot;e&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="6、深拷贝的实现方式">          <a href="#6、深拷贝的实现方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#6、深拷贝的实现方式" class="headerlink" title="6、深拷贝的实现方式"></a>6、深拷贝的实现方式</h4>      <p>方法一 用 JSON.stringify 把对象转换成字符串，再用 JSON.parse 把字符串转换成新的对象。可以转成 JSON 格式的对象才能使用这种方法，如果对象中包含 function 就不能用这种方法了。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.arr[<span class="number">0</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></div></figure><p>方式二 jQuery.extend()</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> newObj =  jQuery.extend(<span class="literal">true</span>, &#123;&#125;, obj);</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.arr[<span class="number">0</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></div></figure><p>方式三 函数递归调用</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">    newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? deepCopy(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = deepCopy(obj);</span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.arr[<span class="number">0</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></div></figure><p>方式四 Object.assign()</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">obj.a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;浅拷贝和深拷贝，以及实现的方法&quot;&gt;
          &lt;a href=&quot;#浅拷贝和深拷贝，以及实现的方法&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#浅拷贝和深拷</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="浅拷贝深拷贝" scheme="http://example.com/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>this指向问题</title>
    <link href="http://example.com/2021/05/27/JS/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/05/27/JS/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-27T09:06:53.000Z</published>
    <updated>2021-05-28T11:41:39.778Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="this的指向问题">          <a href="#this的指向问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#this的指向问题" class="headerlink" title="this的指向问题"></a>this的指向问题</h2>              <h4 id="1-在函数中直接使用">          <a href="#1-在函数中直接使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-在函数中直接使用" class="headerlink" title="1.在函数中直接使用"></a>1.在函数中直接使用</h4>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(content);</span><br><span class="line">    &#125;</span><br><span class="line">    get(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment">// 两个get拿到的值相等</span></span><br><span class="line">    get.call(<span class="built_in">window</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>理解</strong>：1.get（‘’hello‘’）=== get（window，‘’hello‘’）</p><p>​            2.以函数形式调用时this永远指向window；</p>        <h4 id="2、函数作为对象的方法被调用（谁调用我，我就指向谁）">          <a href="#2、函数作为对象的方法被调用（谁调用我，我就指向谁）" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、函数作为对象的方法被调用（谁调用我，我就指向谁）" class="headerlink" title="2、函数作为对象的方法被调用（谁调用我，我就指向谁）"></a>2、函数作为对象的方法被调用（谁调用我，我就指向谁）</h4>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">       name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">       run: <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">`$(this.name) 在跑步 最多<span class="subst">$&#123;time&#125;</span>min就不行了`</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     person.run(<span class="number">30</span>)</span><br><span class="line">     person.run.call(person,<span class="number">30</span>)</span><br></pre></td></tr></table></div></figure><p><strong>理解</strong>：1.person.run(30) ===  person.run.call(person,30)</p><p>​            2.以方法被调用时，this是调用方法的对象</p>        <h4 id="3、以构造函数形式调用时，this指向新创建的对象">          <a href="#3、以构造函数形式调用时，this指向新创建的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、以构造函数形式调用时，this指向新创建的对象" class="headerlink" title="3、以构造函数形式调用时，this指向新创建的对象"></a>3、以构造函数形式调用时，this指向新创建的对象</h4>              <h4 id="4、以call和apply调用时，this指向指定的对象">          <a href="#4、以call和apply调用时，this指向指定的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、以call和apply调用时，this指向指定的对象" class="headerlink" title="4、以call和apply调用时，this指向指定的对象"></a>4、以call和apply调用时，this指向指定的对象</h4>              <h4 id="5、面试题-阿里笔试题">          <a href="#5、面试题-阿里笔试题" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、面试题-阿里笔试题" class="headerlink" title="5、面试题(阿里笔试题)"></a>5、面试题(阿里笔试题)</h4>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">222</span></span><br><span class="line">    <span class="keyword">var</span> a = &#123;</span><br><span class="line">      name: <span class="number">111</span>,</span><br><span class="line">      say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fun = a.say</span><br><span class="line">    fun() <span class="comment">//fun(window),指向window 输出222</span></span><br><span class="line">    a.say() <span class="comment">//a.say.call(a,) 指向a输出111</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = &#123;</span><br><span class="line">      name :<span class="number">333</span>,</span><br><span class="line">      say:<span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        fun()  <span class="comment">//fun(window)222</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b.say(a.say)  <span class="comment">//等同于fun(a.say)(window,),输出222</span></span><br><span class="line">    b.say = a.say<span class="comment">//a.say也就是替换了b中函数体为a中函数体;</span></span><br><span class="line">    b.say()<span class="comment">//b.say.call(b,)输出333</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;this的指向问题&quot;&gt;
          &lt;a href=&quot;#this的指向问题&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#this的指向问题&quot; class=&quot;</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="this指向问题" scheme="http://example.com/tags/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>盒子模型</title>
    <link href="http://example.com/2021/05/24/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2021/05/24/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-05-24T14:43:39.000Z</published>
    <updated>2021-05-24T14:50:18.043Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="div盒子垂直居中的几种方法">          <a href="#div盒子垂直居中的几种方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#div盒子垂直居中的几种方法" class="headerlink" title="div盒子垂直居中的几种方法"></a>div盒子垂直居中的几种方法</h1>              <h2 id="一、盒子没有固定的宽和高">          <a href="#一、盒子没有固定的宽和高" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、盒子没有固定的宽和高" class="headerlink" title="一、盒子没有固定的宽和高"></a>一、盒子没有固定的宽和高</h2>              <h3 id="方案一：使用transform属性的translate平移">          <a href="#方案一：使用transform属性的translate平移" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案一：使用transform属性的translate平移" class="headerlink" title="方案一：使用transform属性的translate平移"></a>方案一：使用transform属性的translate平移</h3>      <p><strong>思路：</strong>使用top:50%; left:50%;时，是以盒子的左上角为原点定位，是左上角的原点居中，但是元素本身并不居中。transform：translate(-50%，-50%):分别向左向上移动自身长宽的50%，使其位于中心。</p><p><strong>优点：</strong>trasform:translate(-50%,-50%)除了可以水平垂直居中，还可以根据屏幕的大小来调节自身的宽度，做弹框时不用设置宽高。</p><p>**缺点 **：有的浏览器不支持，他支持的浏览器有：</p><p><img src="https://img-blog.csdnimg.cn/2019032515245735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmdvdA==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmdvdApx;" alt="img"></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  * &#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content &#123;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    background: pink;</span><br><span class="line">    color: #fff;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    <span class="comment">/* -webkit 是表示针对 safari 浏览器支持，-ms表示针对 IE 浏览器支持。 */</span></span><br><span class="line">    transform: translate(-<span class="number">50</span>%, -<span class="number">50</span>%);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">    我没有宽和高哦</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="二、盒子有固定的宽和高">          <a href="#二、盒子有固定的宽和高" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、盒子有固定的宽和高" class="headerlink" title="二、盒子有固定的宽和高"></a>二、盒子有固定的宽和高</h3>      <p><strong>方案1：</strong>margin负间距</p><p>1、必须要知道div的宽高</p><p>2、然后设置位置为绝对位置</p><p>3、距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指盒子左上角顶点距离页面左、上边界的50%，</p><p>4、最后将该div分别左移和上移，使整个盒子居中，左移和上移的大小就是该DIV(包括border和padding)宽度和高度的一半。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  * &#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 0px;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    top: 50px;</span><br><span class="line">    left: 50px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    margin-left: -101px;</span><br><span class="line">    margin-top: -101px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">    我有固定的宽和高哦</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure><p><strong>方案2：</strong>margin:auto实现绝对定位元素的居中（该方法兼容ie8以上浏览器）</p><p>1、上下左右均设置为0；</p><p>2、margin outo;</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  * &#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 0px;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">    我有固定的宽和高哦!</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;div盒子垂直居中的几种方法&quot;&gt;
          &lt;a href=&quot;#div盒子垂直居中的几种方法&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#div盒子垂直居</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="盒子模型" scheme="http://example.com/tags/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Ajax笔记</title>
    <link href="http://example.com/2021/05/22/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/05/22/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-22T10:23:51.000Z</published>
    <updated>2021-05-22T10:40:05.334Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="第一章-Ajax-前端技术">          <a href="#第一章-Ajax-前端技术" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一章-Ajax-前端技术" class="headerlink" title="第一章 Ajax 前端技术"></a>第一章 Ajax 前端技术</h1>      <p>前端技术： 在浏览器中执行的程序都是前端， html ， css，js等等</p><p>后端技术：在服务器中执行的程序， 使用java语言开发的后端程序。 servlet,jsp, jdbc,mysql,tomcat等等</p>        <h1 id="1-全局刷新和局部刷新">          <a href="#1-全局刷新和局部刷新" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-全局刷新和局部刷新" class="headerlink" title="1 全局刷新和局部刷新"></a>1 全局刷新和局部刷新</h1>      <p>1）全局刷新： 使用form， href等发起的请求是全局刷新。</p><p> 用户发起请求， 视图改变了， 跳转视图，使用新的数据添加到页面。</p><p>缺点：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 传递数据量比较大。 占用网络的带宽</span><br><span class="line">   2. 浏览器需要重新的渲染整个页面。 </span><br><span class="line">   3. 用户的体验不是那么好</span><br></pre></td></tr></table></div></figure><p>2）局部刷新： 在当前页面中，发起请求，获取数据，更新当前页面的dom对象。 对视图部分刷新。</p><p> 特点：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 数量比较小， 在网络中传输速度快。</span><br><span class="line">   2. 更新页面内容， 是部分更新页面， 浏览器不用全部渲染视图。</span><br><span class="line">   3. 在一个页面中，可以做多个 局部刷新</span><br><span class="line">   4. 从服务器获取的是数据， 拿到更新视图</span><br></pre></td></tr></table></div></figure>        <h1 id="2-异步请求对象">          <a href="#2-异步请求对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-异步请求对象" class="headerlink" title="2 异步请求对象"></a>2 异步请求对象</h1>      <p>在局部刷新中，使用异步请求对象，在浏览器内部发起请求，获取数据。</p><p><a href="https://imgtu.com/i/gLGtUK"><img src="https://z3.ax1x.com/2021/05/22/gLGtUK.jpg" alt="gLGtUK.jpg"></a></p><p>异步对象是在浏览器内部的一种 javascript对象。 各大浏览器都能支持异步对象的使用。chrome ,firework, ie, opper ,</p><p>异步对象 XMLHttpRequest</p>        <h1 id="3-异步对象XMLHttpRequest介绍">          <a href="#3-异步对象XMLHttpRequest介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-异步对象XMLHttpRequest介绍" class="headerlink" title="3. 异步对象XMLHttpRequest介绍"></a>3. 异步对象XMLHttpRequest介绍</h1>      <p>js中的一种对象， 使用js语法创建和使用这个对象。</p><p>var xhr = new XMLHttpRequest();</p><p>之后就可以 使用xhr对象的属性或者函数，进行异步对象的操作。</p><p>使用异步对象实现局部刷新， 异步对象主要负责发起请求，传递请求的参数，并从服务器接收数据。</p><p>局部刷新需要使用那些技术：</p><p>1）javascript ： 创建XMLHttpRequest对象， 调用它的属性或者方法</p><p>2）dom：处理dom，更新select的数据</p><p>3）css: 处理视图， 更新，美化。</p><p>4）servlet：服务器端技术</p><p>5）数据格式：json。 它之前是xml</p><p>把上面这些技术的综合使用叫做ajax（阿贾克斯）。</p>        <h1 id="4-Ajax">          <a href="#4-Ajax" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-Ajax" class="headerlink" title="4 Ajax"></a>4 Ajax</h1>      <p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和XML）。 AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法</p><p>AJAX不是新的编程语言，它是多种技术的综合使用。 包含了javascript, dom</p><p>,css, 服务器端技术， servlet ，jsp ，jdbc等等， 还有 json数据格式。</p><p>使用AJAX实现局部刷新。</p><p>Ajax核心是 javascript 和 xml （json）：使用javascript操作异步对象XMLHttpRequest. 和服务器交换使用json数据格式。</p>        <h1 id="5-异步对象XMLHttpRequest属性和方法">          <a href="#5-异步对象XMLHttpRequest属性和方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-异步对象XMLHttpRequest属性和方法" class="headerlink" title="5. 异步对象XMLHttpRequest属性和方法"></a>5. 异步对象XMLHttpRequest属性和方法</h1>      <ol><li><p>创建异步对象，使用js的语法</p><p>var xhr = new XMLHttpRequest();</p></li><li><p>XMLHttpRequest方法</p><p>①）open(请求方式, 服务器端的访问地址，异步还是同步)</p><p>例如：xhr.open(“get”,”loginServlet”,true);</p><p>②）send(): 使用异步对象发送请求</p></li><li><p>XMLHttpRequest属性</p><p>readyState属性：请求的状态</p><p> 0：表示创建异步对象时，new XMLHttpRequest();</p><p> 1：表示初始异步对象的请求参数。 执行open()方法</p><p> 2：使用send()方法发送请求。</p><p> 3：使用异步对象从服务器接收了数据</p><p> 4：异步对象接收了数据，并在异步对象内部处理完成后。</p><p>status属性：网络的状态，和Http的状态码对应</p><p> 200：请求成功</p><p> 404： 服务器资源没有找到</p><p> 500： 服务器内部代码有错误</p><p>responseText属性：表示服务器端返回的数据</p><p> 例如： var data = xhr.responseText;</p></li></ol>        <h1 id="6-异步对象XMLHttpRequest使用步骤">          <a href="#6-异步对象XMLHttpRequest使用步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-异步对象XMLHttpRequest使用步骤" class="headerlink" title="6. 异步对象XMLHttpRequest使用步骤"></a>6. 异步对象XMLHttpRequest使用步骤</h1>      <p>1）使用js创建异步对象</p><p> var xhr = new XMLHttpRequest();</p><p>2)给异步对象绑定事件。事件名称 onreadystatechange</p><p>例如button增加单击事件 onclick</p><p>xhr绑定事件</p><p>xhr.onreadysatechange=function() { 当事件发生时执行的代码 }</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btnClick()&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">       按钮单击的处理代码</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在绑定事件中做什么，根据readyState值做请求的处理</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xhr.readystatechagne=function()&#123;</span><br><span class="line">   if( xhr.readyState==4 &amp;&amp; xhr.status==200 )&#123;</span><br><span class="line">        从服务器获取了数据， 更新当前页面的dom对象，完成请求的处理</span><br><span class="line">        var data = xhr.responseText;</span><br><span class="line">        更新dom对象</span><br><span class="line">        document.getElementById(&quot;#mydiv&quot;).innertHTML = data;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol><li><p>初始请求的参数，执行open()函数</p><p>xhr.open(“get”,”loginServlet”,true)</p></li></ol><p>4)发送请求，执行send()</p><p>xhr.send()</p>        <h1 id="7-第一个例子">          <a href="#7-第一个例子" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-第一个例子" class="headerlink" title="7. 第一个例子"></a>7. 第一个例子</h1>      <p>使用全局刷新， 实现计算bmi</p><p>可以使用jsp显示request作用域中的数据，使用el表达式</p><p>也可以使用HttpServletResponse对象输出数据， 数据给了浏览器。 浏览器可以接收HttpServletResponse对象print的数据</p>        <h1 id="8-同步请求和异步请求">          <a href="#8-同步请求和异步请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-同步请求和异步请求" class="headerlink" title="8 同步请求和异步请求"></a>8 同步请求和异步请求</h1>      <p>看open(请求方式， 访问uri地址，boolean是不是异步的)</p><p>true：异步请求</p><p>false：同步请求</p>        <h1 id="第二章-jQuery">          <a href="#第二章-jQuery" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二章-jQuery" class="headerlink" title="第二章 jQuery"></a>第二章 jQuery</h1>      <ol><li><p>jquery的介绍</p><p>jquery就是js函数库， 里面有大量的js函数， 使用这些函数操作dom对象， 做事件，动画， ajax处理</p><p>地址： <span class="exturl"><a class="exturl__link" href="https://jquery.com/">https://jquery.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p>下载</p><p>下载地址：<span class="exturl"><a class="exturl__link" href="https://jquery.com/download/">https://jquery.com/download/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>压缩版本： 文件体积比较小，适合项目上线后使用。 jquery-3.4.1.min.js</p><p>未压缩：体积比较大，可读性比较好，适合开发阶段使用 jquery-3.4.1.js</p></li></ol>        <h2 id="2-1-使用jquery">          <a href="#2-1-使用jquery" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-使用jquery" class="headerlink" title="2.1 使用jquery"></a>2.1 使用jquery</h2>      <p>步骤：</p><ol><li><p>需要在你的项目中加入jquery的文件， idea中是把jquery放在webapp目录。一般是创建一个js目录。存放js文件的。 对于hbuilder工具， 放在项目的js目录中就可以了</p></li><li><p>创建一个html文件或者jsp都可以， 在文件中使用</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery的文件的相对路径&quot;</span> /&gt;</span> 这样是不行的</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery的文件的相对路径&quot;</span> /&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>这样是可以的</span><br></pre></td></tr></table></div></figure></li><li><p>在js代码中，调用jquery中函数</p></li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;第一个jquery例子&lt;/title&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  $:jquery中的函数名</span></span><br><span class="line"><span class="comment">  document:是参数</span></span><br><span class="line"><span class="comment">  $(document): 把js中的document对象变成jquery可以使用的对象。</span></span><br><span class="line"><span class="comment">               然后调用ready()的函数。 这个ready()是jquery中的函数</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   ready()的执行时间在页面dom对象加载后执行的。相当于js中onload事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ready(函数):表示在页面对象加载后执行 这个函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* $(document).ready(function()&#123;</span></span><br><span class="line"><span class="comment">alert(&quot;使用jquery了&quot;)</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* $(document).ready( myinit() )</span></span><br><span class="line"><span class="comment">function myinit()&#123;</span></span><br><span class="line"><span class="comment">alert(&quot;====相当于onload==&quot;)</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery提供了简单方式,使用ready()</span></span><br><span class="line"><span class="comment">//$(  参数是一个函数 )</span></span><br><span class="line">$( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;简单的方式使用ready&quot;</span>)</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="2-2-对象的分类">          <a href="#2-2-对象的分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-对象的分类" class="headerlink" title="2.2 对象的分类"></a>2.2 对象的分类</h2>      <p>dom对象和jquery对象。 在一个文件中同时存在两种对象</p><p>dom对象： 使用js的代码获取，创建的对象。 html中的对象都是dom对象。</p><p>jquery对象： 使用jquery获取获取的对象。</p><p>为什么要使用dom对象，还有jquery对象？</p><p>目的是要dom对象的函数或者属性， 以及使用使用jquery中提供的函数或者属性。</p><p>要 dom中的内容就需要使用dom对象， 要使用jquery函数库中的函数需要使用jquery对象。</p><p>dom对象和jquery对象可以相互转换的</p>        <h3 id="2-2-1-dom对象转为jquery对象。">          <a href="#2-2-1-dom对象转为jquery对象。" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-1-dom对象转为jquery对象。" class="headerlink" title="2.2.1. dom对象转为jquery对象。"></a>2.2.1. dom对象转为jquery对象。</h3>      <p>语法： $( dom对象 ) 得到的是一个jquery对象， 可以调用jquery中提供的函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;t1&quot;</span> /&gt;</span><br><span class="line"><span class="comment">//通过js的函数，获取dom对象</span></span><br><span class="line"><span class="keyword">var</span> dom= <span class="built_in">document</span>.getElementById(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"><span class="comment">//把dom转为jquery</span></span><br><span class="line"><span class="keyword">var</span> jqueryObj = $(dom);</span><br><span class="line"><span class="comment">//调用jquery中的函数</span></span><br><span class="line">jqueryObject.val();<span class="comment">//获取dom对象的value属性的值</span></span><br><span class="line"></span><br><span class="line">提示：为了区分dom对象和jquery对象，可以在jquery对象变量名上，加一个$ , 例如 $obj </span><br></pre></td></tr></table></div></figure>        <h3 id="2-2-2-jquery对象转为dom对象。">          <a href="#2-2-2-jquery对象转为dom对象。" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-2-jquery对象转为dom对象。" class="headerlink" title="2.2.2 jquery对象转为dom对象。"></a>2.2.2 jquery对象转为dom对象。</h3>      <p>语法： jquery对象是一个数组， 数组成员是dom对象。 使用 [下标] 或 get(下标)</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txt1&quot;</span>/&gt;</span><br><span class="line">使用jquery的方式表示这个dom对象</span><br><span class="line">$(<span class="string">&quot;#txt1&quot;</span>):获取id是txt1的dom对象。 </span><br><span class="line"><span class="keyword">var</span>  obj = $(<span class="string">&quot;#txt1&quot;</span>); <span class="comment">//obj是一个jquery对象，是一个包含了一个成员的dom数组。  obj[0]就是dom对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dom = obj[<span class="number">0</span>]; 或者 obj.get(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用dom对象的函数或者属性</span></span><br><span class="line">alert(dom.value)</span><br></pre></td></tr></table></div></figure>        <h2 id="2-3-选择器">          <a href="#2-3-选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-选择器" class="headerlink" title="2.3 选择器"></a>2.3 选择器</h2>      <p>什么是选择器： 选择器就是一个字符串， 是一个定位dom对象的字符串。 使用这个字符串作为条件定位dom对象。 可以使用 id ，class样式名称， 标签名称等作为选择器使用，定位dom对象</p>        <h3 id="2-3-1-基本选择器">          <a href="#2-3-1-基本选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-1-基本选择器" class="headerlink" title="2.3.1 基本选择器"></a>2.3.1 基本选择器</h3>      <p>使用dom对象的id， class名称， 标签名称等作为条件定位dom对象。</p><ol><li><p>使用dom对象的id作为条件</p><p>语法： $(“#id”) document.getElementById(“id”)</p></li><li><p>class选择器，使用对象的class名称定位dom对象</p><p>语法：$(“.class名称”) document.getElementsByClassName()</p></li><li><p>标签选择器，使用标签名称作为条件定位dom对象</p><p>语法：$(“标签名称”) document.getElementsByTagName()</p></li><li><p>所有选择器</p><p>语法： $(“*”)</p></li><li><p>组合选择器</p><p>语法：$(“#id,.class,标签名称”)</p><p>组合选择器使用 id 或者class名称或者标签名称定位dom对象， id，class，标签名称可以任意组合。</p></li></ol>        <h3 id="2-3-2-表单选择器">          <a href="#2-3-2-表单选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-2-表单选择器" class="headerlink" title="2.3.2 表单选择器"></a>2.3.2 表单选择器</h3>      <p>表单选择器使用 dom对象的type属性值定位dom对象的， 和form标签无关。</p><p>语法： $(“:type属性值”)</p><p>例如：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line">使用表单选择器： $(<span class="string">&quot;:text&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="2-4-过滤器">          <a href="#2-4-过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-过滤器" class="headerlink" title="2.4 过滤器"></a>2.4 过滤器</h2>      <p>过滤器是一个字符串，用了筛选dom对象的， 过滤器是和选择器一起使用的。 在选择了dom对象后，在进行过滤筛选。</p>        <h3 id="2-4-1-基本过滤器">          <a href="#2-4-1-基本过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-1-基本过滤器" class="headerlink" title="2.4.1 基本过滤器"></a>2.4.1 基本过滤器</h3>      <p>使用dom对象在数组中的位置，作为过滤条件的。</p><p>1）选择数组中第一个dom成员</p><p>语法：$(“选择器:first”)</p><ol><li>选择数组中最后一个成员</li></ol><p>语法：$(“选择器:last”)</p><ol><li>选择等于指定下标的dom成员</li></ol><p>语法：$(“选择器:eq(下标)”)</p><p>4）选择大于某个下标的所有成员</p><p>语法：$(“选择器:gt(下标)”)</p><p>5）选择小于某个下标的所有成员</p><p>语法：$(“选择器:lt(下标)”)</p>        <h3 id="2-4-2-表单过滤器">          <a href="#2-4-2-表单过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-2-表单过滤器" class="headerlink" title="2.4.2 表单过滤器"></a>2.4.2 表单过滤器</h3>      <p>根据对象的状态作为条件，筛选dom对象</p><p>1）获取可用的文本框</p><p>语法：$(“:text:enabled”)</p><ol><li>获取不可用的文本框</li></ol><p>语法： $(“:text:disabled”)</p><p>3）获取选中的复选框</p><p>语法：$(“:checkbox:checked”)</p><ol><li>获取选中下拉列表框</li></ol><p>语法： $(“选择器 &gt; option:selected”)</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;lang&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sql&quot;</span>&gt;</span>sql<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="2-5-函数">          <a href="#2-5-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-函数" class="headerlink" title="2.5 函数"></a>2.5 函数</h2>              <h3 id="2-5-1-第一组函数">          <a href="#2-5-1-第一组函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-1-第一组函数" class="headerlink" title="2.5.1 第一组函数"></a>2.5.1 第一组函数</h3>      <p>1）val()：操作dom对象的value值</p><p>val(): 没有参数， 获取dom数组中第一个dom对象的value值</p><p>val(参数)： 有参数， 给dom数组中所有dom对象的value属性赋值</p><p>2）text() : 操作标签的文本内容，标签开始和结束之间的内容</p><p>text(): 没有参数， 把dom数组中所有dom对象的文本内容链接起来，形成一个字符串，并返回这个这个字符串。</p><p>text(参数)：给dom数组中的所有成员统一赋予新的文本</p><p>3）attr(): 操作value ，文本以外的属性时。</p><p>attr(“属性名”)：获取dom数组中第一个dom成员的此属性值</p><p>attr(“属性名”,”属性值”)：给dom数组中所有dom成员此属性赋值</p>        <h3 id="2-5-2-第二组函数">          <a href="#2-5-2-第二组函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-5-2-第二组函数" class="headerlink" title="2.5.2 第二组函数"></a>2.5.2 第二组函数</h3>      <p>1） remove()</p><p>删除选择的dom对象和他的子对象</p><p>语法： $(”选择器“).remove()</p><p>2） empty()</p><p>删除dom对象的子对象</p><p>语法： $(“选择器”).empty()</p><ol><li>append()</li></ol><p>给dom对象在他的后面增加新的dom对象</p><p>语法： $(“选择器”).append( 子dom 对象 )</p><ol><li>html()</li></ol><p>html(): 获取dom数组中第一个dom对象的文本值（ html()返回结果相当于innertHTML ）</p><p>html(参数)：给dom数组中所有成员设置新的文本内容。 （html()返回结果相当于innertHTML ）</p><p>5)each()</p><p>each是循环函数， 可以循环数组， json ， dom对象数组</p><p>① $.each( 要循环的内容， function(index,element ){ 处理函数} )</p><p>要循环的内容: 可以是数组， json对象， dom对象数组。</p><p>function： 循环的处理函数， 每个成员都会执行函数一次。</p><p> index：是循环变量的值， 名称自定义</p><p> element： 和index对应的成员， element名称是自定义的</p><p>例如</p><p>doArrayContent： function(index,element ){ 处理函数} )</p><p>② $(“选择器”).each(function(index,element){ 处理函数} )</p><p>可以对jquery对象进行循环处理。 jquery对象就是dom数组</p>        <h2 id="2-6-事件">          <a href="#2-6-事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-事件" class="headerlink" title="2.6 事件"></a>2.6 事件</h2>      <p>jquery可以给dom对象绑定事件，在程序执行期间动态的处理事件</p>        <h3 id="2-6-1-第一种事件绑定语法">          <a href="#2-6-1-第一种事件绑定语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-1-第一种事件绑定语法" class="headerlink" title="2.6.1 第一种事件绑定语法"></a>2.6.1 第一种事件绑定语法</h3>      <p>语法： $(“选择器”).事件名称(事件的处理函数)</p><p>$(“选择器”)：选择0或多个dom对象。给他们绑定事件</p><p>事件名称： 就是js中的 去掉on的部分。 例如单击事件onclick, 这里的事件名称就是 click</p><p>事件的处理函数: 函数定义， 当事件发生时，执行这个函数。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;绑定事件&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> 绑定事件</span><br><span class="line">$(<span class="string">&quot;#btn&quot;</span>).click( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; 单击的处理代码 &#125; )</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;:button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; 单击处理代码&#125;)</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//页面dom对象加载后执行, 相当于onload事件</span></span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;==button单击了，执行处理函数==&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;绑定事件&quot;</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="2-6-2-第二种事件绑定方式，-on">          <a href="#2-6-2-第二种事件绑定方式，-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-6-2-第二种事件绑定方式，-on" class="headerlink" title="2.6.2 第二种事件绑定方式， on"></a>2.6.2 第二种事件绑定方式， on</h3>      <p>语法： $(“选择器”).on( 事件名称, function(){事件处理函数})</p><p>事件： 就是js中去掉on的部分。</p><p>function： 事件处理函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;绑定事件&quot;</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">&quot;按钮单击了&quot;</span>)&#125;)</span><br><span class="line">&lt;/script&gt;        </span><br></pre></td></tr></table></div></figure>        <h2 id="2-7-Ajax">          <a href="#2-7-Ajax" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-Ajax" class="headerlink" title="2.7 Ajax"></a>2.7 Ajax</h2>      <p>使用jquery提供的函数实现ajax请求的处理。 代替直接使用XMLHttpRequest. 但是jquery实际还是使用的异步对象。</p>        <h3 id="2-7-1-ajax-核心的函数">          <a href="#2-7-1-ajax-核心的函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-1-ajax-核心的函数" class="headerlink" title="2.7.1 $.ajax() 核心的函数"></a>2.7.1 $.ajax() 核心的函数</h3>      <p>语法： $.ajax( { json格式的参数} )</p><p>json格式的参数：key是定义好的， 需要开发人员给key赋值。 这些key是用来表示ajax请求必须的参数</p><p>例如，请求的uri地址， 是不是异步请求， 请求的方式等等。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(</span><br><span class="line">  &#123;</span><br><span class="line">      url:<span class="string">&quot;queryProvinceServlet&quot;</span>,</span><br><span class="line">      type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">      data:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;,</span><br><span class="line">      dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123; 开发人员获取数据，更新dom对象 &#125;,</span><br><span class="line">      error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">&quot;请求错误&quot;</span>)&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></div></figure><p>url：服务器的地址，例如某个servlet的访问地址。 queryProvinceServlet</p><p>type:表示请求的方式，get，post。 默认是get。 这个值不用区分大小写</p><p>data：表示提交的请求参数。 可以是string， 数组， json类型的。 推荐使用json格式。</p><p> 例如： data: {“name”:”李四”,”age”:20}</p><p> jquery在发送请求时，会把json中的key作为请求的参数使用， key对应的值作为参数数据。</p><p> 转为的结果： <span class="exturl"><a class="exturl__link" href="http://localhost:8080/myweb/queryProvinceServlet?name=%E6%9D%8E%E5%9B%9B&amp;age=20">http://localhost:8080/myweb/queryProvinceServlet?name=李四&amp;age=20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>dataType: 数据格式， 可以是 html， text ， xml ，json等等。 表示发起请求后，希望服务器端返回的数据格式。 jquery可以尝试使用对应格式处理返回的数据。 比如你指定了 dataType:json,表示希望服务器返回的是json格式数据。 然后jquery把json数据转为json对象。服务器代码可以获取到 dataType的内容。</p><p> 例如： 请求中 dataType:”json”, jquery发起请求后，</p><p> 在请求头中 Accept: application/json, text/javascript, <em>/</em>; q=0.01</p><p> 如果dataType:”text”, 请求中</p><p> Accept: text/plain, <em>/</em>; q=0.01</p><p>success: 函数function。 当服务器端返回了数据，jquery处理完数据后，执行这个函数。 等同于异步对象的 readyState==4 $$ status=200的情况</p><p> 例如： success:function( data){ 开发人员处理服务器返回的数据 }</p><p> data是自定义形参， 相当于 data= xhr.responseText</p><p>error:function(), 当请求错误时，执行这个函数。</p><p>contentType:表示请求的参数数据格式。例如 application/json , 这个内容可以不写。</p><p>async: 是一个boolean表示请求是同步的还是异步的。 true是异步的，默认是true； false同步的.</p>        <h3 id="2-7-2-get">          <a href="#2-7-2-get" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-2-get" class="headerlink" title="2.7.2 $.get()"></a>2.7.2 $.get()</h3>      <p>$.get()这个函数就是执行get请求方式的ajax</p><p>语法： $.get(url, 请求参数， success函数， dataType)</p><p>例如：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;queryName&quot;</span>,&#123;<span class="string">&quot;proid&quot;</span>:<span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123; 获取省份名称 &#125;, <span class="string">&quot;text&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="2-7-3-post">          <a href="#2-7-3-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-7-3-post" class="headerlink" title="2.7.3 $.post()"></a>2.7.3 $.post()</h3>      <p>$.post() 执行post请求的ajax。</p><p>语法： $.post(url, 请求参数， success函数， dataType)</p><p>例如：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">&quot;queryName&quot;</span>,&#123;<span class="string">&quot;proid&quot;</span>:<span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123; 获取省份名称 &#125;, <span class="string">&quot;text&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="2-8-级联查询">          <a href="#2-8-级联查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-8-级联查询" class="headerlink" title="2.8 级联查询"></a>2.8 级联查询</h2>      <p>思路：有两个数据库的查询 1： 查询所有的省份名称和id ； 2 根据提交的省份id ，查询city表，得到城市列表</p><p> 有两个servlet接收请求， 一个查询所有的省份 ；一个是接收省份id的参数，查询省份对应的城市列表。</p><p> 数据格式使用 json</p><p> 发起请求使用 $.ajax, $.get, $.post</p><p> 事件： onChange()</p><p>实现步骤：</p><p>1.数据表province( 获取全部的id和name列的值)，</p><p>city表根据provinceid的值，得到id，name列</p><p>2.创建web应用。 加入mysql驱动的jar 和jackson的jar</p><p>3.创建实体类， Province , City</p><p>4.创建Dao类， QueryDao类，有两个方法</p><p>5.创建Servlet， 两个servlet ，一个是查询所有的省份名称， 一个是查询城市列表</p><p>6.创建jsp， 发起两个ajax请求。</p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;第一章-Ajax-前端技术&quot;&gt;
          &lt;a href=&quot;#第一章-Ajax-前端技术&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#第一章-Ajax-前</summary>
      
    
    
    
    <category term="Ajax" scheme="http://example.com/categories/Ajax/"/>
    
    
    <category term="Ajax个人笔记" scheme="http://example.com/tags/Ajax%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GitHub搭建个人博客具体步骤</title>
    <link href="http://example.com/2021/04/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/04/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2021-04-13T04:29:12.000Z</published>
    <updated>2021-04-17T08:27:11.109Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="搭建步骤：">          <a href="#搭建步骤：" class="heading-link"><i class="fas fa-link"></i></a><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2>      <p><a href="https://imgtu.com/i/c4d4GF"><img src="https://z3.ax1x.com/2021/04/17/c4d4GF.png" alt="c4d4GF.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;搭建步骤：&quot;&gt;
          &lt;a href=&quot;#搭建步骤：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#搭建步骤：&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="关于博客" scheme="http://example.com/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="用hexo搭建博客" scheme="http://example.com/tags/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/13/hello-world/"/>
    <id>http://example.com/2021/04/13/hello-world/</id>
    <published>2021-04-13T03:54:11.339Z</published>
    <updated>2021-04-13T03:54:11.340Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link" href="https://hexo.io/">Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/">documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link" href="https://github.com/hexojs/hexo/issues">GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="Quick-Start">          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post">          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/writing.html">Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server">          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/server.html">Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files">          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/generating.html">Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites">          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-exter</summary>
      
    
    
    
    
  </entry>
  
</feed>
